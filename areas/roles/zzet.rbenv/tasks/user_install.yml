---
- name: checkout rbenv_repo for selected users
  git: >
    repo={{ rbenv_repo }}
    dest={{ rbenv_root }}
    version={{ rbenv.version }}
    accept_hostkey=yes
    force=yes
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: create plugins directory for selected users
  file: state=directory path={{ rbenv_root }}/plugins
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: install plugins for selected users
  git: >
    repo={{ item[1].repo }}
    dest={{ rbenv_root }}/plugins/{{ item[1].name }}
    version={{ item[1].version }}
    accept_hostkey=yes
    force=yes
  with_nested:
    - "{{ rbenv_users }}"
    - "{{ rbenv_plugins }}"
  become: yes
  become_user: "{{ item[0] }}"
  ignore_errors: yes

- name: add rbenv initialization to profile system-wide
  template: src=rbenv_user.sh.j2 dest=/etc/profile.d/rbenv.sh owner=root group=root mode=0755
  become: yes
  when:
    - ansible_os_family != 'OpenBSD' and ansible_os_family != 'Darwin'

- name: add rbenv initialization to profile system-wide
  blockinfile: block="{{ lookup('template', 'rbenv_user.sh.j2') }}" dest=/etc/profile
  become: yes
  when:
    - ansible_os_family == 'Darwin'

- name: set default-gems for select users
  copy: src=default-gems dest={{ rbenv_root }}/default-gems
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when:
    - default_gems_file is not defined
  ignore_errors: yes

- name: set custom default-gems for select users
  copy: src={{ default_gems_file }} dest={{ rbenv_root }}/default-gems
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when:
    - default_gems_file is defined
  ignore_errors: yes

- name: set gemrc for select users
  copy: src=gemrc dest=~/.gemrc
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: set vars for select users
  copy: src=vars dest={{ rbenv_root }}/vars
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: check ruby versions installed for select users
  shell: $SHELL -lc "{{ rbenv_root }}/bin/rbenv versions | grep {{ item[1].version }}"
  become: yes
  become_user: "{{ item[0] }}"
  with_nested:
    - "{{ rbenv_users }}"
    - "{{ rbenv.rubies }}"
  register: ruby_installed
  changed_when: false
  ignore_errors: yes
  failed_when: false
  check_mode: no

- name: install ruby {{ item[2].version }} for select users
  shell: $SHELL -lc "{{ rbenv_root }}/bin/rbenv install {{ item[2].version }}"
  become: yes
  become_user: "{{ item[1] }}"
  with_nested:
    - "{{ ruby_installed.results }}"
    - "{{ rbenv_users }}"
    - "{{ rbenv.rubies }}"
  when:
    - item[0].rc != 0
    - item[0].item[0] == item[1]
    - item[0].item[1].version == item[2].version
  ignore_errors: yes
  environment: "{{ item[2].env | default({}) | combine({ 'TMPDIR': rbenv_tmpdir }) }}"

- name: check if user ruby version is {{ rbenv.default_ruby }}
  shell: $SHELL -lc "{{ rbenv_root }}/bin/rbenv version | cut -d ' ' -f 1 | grep -Fx '{{ rbenv.default_ruby }}'"
  become: yes
  become_user: "{{ item }}"
  with_items: "{{ rbenv_users }}"
  register: ruby_selected
  changed_when: false
  ignore_errors: yes
  failed_when: false
  check_mode: no

- name: set ruby {{ rbenv.default_ruby }} for select users
  shell: $SHELL -lc "{{ rbenv_root }}/bin/rbenv global {{ rbenv.default_ruby }} && rbenv rehash"
  become: yes
  become_user: "{{ item[1] }}"
  with_together:
    - "{{ ruby_selected.results }}"
    - "{{ rbenv_users }}"
  when:
    - item[0].rc != 0
  ignore_errors: yes
